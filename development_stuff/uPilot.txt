Proceedure:

sudo apt-get install network-manager
sudo apt-get install network-manager-gnome

Create new WWAN0 connection using mobile broadband wizard and '3internet' setting for APN.

sudo minicom -D /dev/ttyUSB2   ........ Launch serial terminal
AT+CGPADDR=1                      ..... get ip address
Open modem connection and type in IP address in first column. 
Other 2 columns type 255.255.255.0


+CGPADDR: 1,10.135.0.115     ............ IP address.




pi@raspberrypi:~ $ sudo systemctl start NetworkManager.service
pi@raspberrypi:~ $ sudo systemctl start ModemManager.service
pi@raspberrypi:~ $ nmcli
cdc-wdm0: disconnected
	gsm (qcserial, cdc_mbim), hw

eth0: unavailable
	"0424 7800"
	ethernet (lan78xx), B8:27:EB:E5:E5:E3, hw, mtu 1500

wlan0: unavailable
	"Broadcom "
	wifi (brcmfmac), CE:EE:EB:C3:4D:1C, hw

lo: unmanaged
	loopback (unknown), 00:00:00:00:00:00, sw, mtu 65536

Use "nmcli device show" to get complete information about known devices and
"nmcli connection show" to get an overview on active connection profiles.

Consult nmcli(1) and nmcli-examples(5) manual pages for complete usage details.
pi@raspberrypi:~ $


AT!SCACT=?
AT!SCACT=1,1  ....... +CME ERROR: 30  ..... No network.

To check the registration status of the device,
AT+CGREG?


sudo apt-get install network-manager
sudo apt-get install modem-manager-gui
ModemManager 

sudo stop network-manager
sudo start network-manager
sudo systemctl start NetworkManager.service
sudo systemctl stop NetworkManager.service
sudo systemctl stop ModemManager.service
sudo systemctl start ModemManager.service

nmcli
sudo apt-get install -y libqmi-utils

sudo qmicli --device=/dev/cdc-wdm0 --get-expected-data-format

pi@raspberrypi:~ $ sudo qmicli --device=/dev/cdc-wdm0 --get-expected-data-format
error: cannot get expected data format: Expected data format not retrieved properly: Failed to open file '/sys/class/net/wwan0/qmi/raw_ip': No such file or directory


sudo picocom -b 115200 -r -l -echo -c /dev/ttyUSB2   ....... THIS WORKS !!!!! ... But erase -echo.
sudo minicom -D /dev/ttyUSB2   ....... THIS WORKS !!!!!

sudo minicom -D /dev/ttyACM0

sudo minicom -D /dev/ttyAMA0

ls /dev/ > dev_list_1.txt
Then run this after you plug it

ls /dev/ | diff --suppress-common-lines -y - dev_list_1.txt

AT+CGDCONT?

https://m2msupport.net/m2msupport/data-call-at-commands-to-set-up-gprsedgeumtslte-data-call/


Vodafone Pay As You Go Mobile Internet APN Settings
Name:	Vodafone Internet
APN:	pp.vodafone.co.uk
Username:	wap
Password:	wap
Picture Message (MMS) Settings
MMSC:	http://mms.vodafone.co.uk/servlets/mms
Proxy:	212.183.137.12
Port:	8799

EE Mobile Internet APN Settings
Name:	EE Internet
APN:	everywhere
Username:	eesecure
Password:	secure
Picture Message (MMS) Settings
MMSC:	http://mms/
Proxy:	149.254.201.135
Port:	8080

Three Mobile Internet APN Settings
Name:	3
APN:	3internet
Username:	(leave blank)
Password:	(leave blank)
Picture Message (MMS) Settings
MMSC:	http://mms.um.three.co.uk:10021/mmsc
Proxy:	217.171.129.2
Port:	8799

pi@raspberrypi:~ $ lsusb -t
/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=dwc_otg/1p, 480M
    |__ Port 1: Dev 2, If 0, Class=Hub, Driver=hub/4p, 480M
        |__ Port 1: Dev 3, If 0, Class=Hub, Driver=hub/3p, 480M
            |__ Port 2: Dev 10, If 12, Class=Communications, Driver=cdc_mbim, 480M
            |__ Port 2: Dev 10, If 3, Class=Vendor Specific Class, Driver=qcserial, 480M
            |__ Port 2: Dev 10, If 13, Class=CDC Data, Driver=cdc_mbim, 480M
            |__ Port 2: Dev 10, If 2, Class=Vendor Specific Class, Driver=qcserial, 480M
            |__ Port 2: Dev 10, If 0, Class=Vendor Specific Class, Driver=qcserial, 480M
            |__ Port 1: Dev 6, If 0, Class=Vendor Specific Class, Driver=lan78xx, 480M
        |__ Port 2: Dev 4, If 0, Class=Human Interface Device, Driver=usbhid, 1.5M
        |__ Port 2: Dev 4, If 1, Class=Human Interface Device, Driver=usbhid, 1.5M
        |__ Port 3: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 12M
        |__ Port 3: Dev 5, If 1, Class=Human Interface Device, Driver=usbhid, 12M


AT+CGDCONT= 1,"IPV4V6","everywhere",,,
AT+CGDCONT?

nmcli monitor

ATi9    ........... Card info
AT+CSQ   ............ RSSI

3	-107	Marginal
4	-105	Marginal
5	-103	Marginal
6	-101	Marginal
7	-99	Marginal
8	-97	Marginal

AT+FCLASS=0            ...... Set to data mode.
AT+FCLASS?

AT+WS46=?
AT+WS46?              ....... 25 is good!

To check the registration status of the device,
AT+CGREG?

Results of network registration status commans,
0,0 – not registered, MT is not currently searching a new operator to register to
0,1 – Registered, home network
0,2 – Searching
0,3 – Registration denied
0,5 – Registered, non-home network

SIM card is locked, please correct those issues.
AT+CPIN?

If connected, network info:
AT+COPS?

Now to set up the session, the appropriate PDP context needs to be activated.
AT+CGACT=1,1



SCRIPT:
//First check SIM is not locked and it is ready
AT+CPIN?

//Wait
WAIT=1

//Check the signal strength. In weak signal conditions, data throughput will be low
AT+CSQ

//Check what network is the device on
AT+COPS?

//Wait for few seconds as AT+COPS command can take time
WAIT=3

//Get the registration status of the device. If the status is ‘1’, the device is registered and in home network
AT+CGREG?

//Wait
WAIT=3

//Set up PDP context. Refer to the service provider for APN info
AT+CGDCONT=1,"IP","everywhere"
AT+CGDCONT=1,"IPV4V6","three.co.uk"
AT+CGDCONT=1,"IPV4V6","3internet"
AT+CGDCONT=1,"IPV4V6","pp.vodafone.co.uk"
AT+CGDCONT?

//Wait
WAIT=1

//Enable just MBIM:
AT!ENTERCND="A710"
AT!usbcomp=?
AT!usbcomp=1,1,0000100D

AT!USBCOMP=<Config Index>,<Config Type>,<Interface bitmask>
  <Config Index>      - configuration index to which the composition applies, should be 1

  <Config Type>       - 1:Generic, 2:USBIF-MBIM, 3:RNDIS
                        config type 2/3 should only be used for specific Sierra PIDs: 68B1, 9068
                        customized VID/PID should use config type 1

  <Interface bitmask> - DIAG     - 0x00000001,
                        NMEA     - 0x00000004,
                        MODEM    - 0x00000008,
                        RMNET0   - 0x00000100,
                        RMNET1   - 0x00000400,
                        MBIM     - 0x00001000,
  e.g.
  10D  - diag, nmea, modem, rmnet interfaces enabled
  1009 - diag, modem, mbim interfaces enabled

  The default configuration is:
  at!usbcomp=1,1,10F


AT!usbcomp=1,1,0000100D
AT!usbcomp=1,1,00001009
AT!usbcomp?

AT+CGPADDR=1
+CGPADDR: 1,10.57.47.165


pi@raspberrypi:~ $ ifconfig
eth0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        ether b8:27:eb:e5:e5:e3  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 386  bytes 33632 (32.8 KiB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 386  bytes 33632 (32.8 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

wwan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 169.254.181.248  netmask 255.255.0.0  broadcast 169.254.255.255
        ether 2a:03:70:bf:90:f5  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 36  bytes 9433 (9.2 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

wwan1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 169.254.181.248  netmask 255.255.0.0  broadcast 169.254.255.255
        inet6 fe80::1db3:fee7:97cc:41b9  prefixlen 64  scopeid 0x20<link>
        ether 2a:03:70:bf:90:f5  txqueuelen 1000  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 95  bytes 20287 (19.8 KiB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

pi@raspberrypi:~ $ 

at!antsel=?


//Confirm setting by reading PDP profile
AT+CGDCONT?

//Perform a GPRS Attach
AT+CGATT=1

//Wait
WAIT=3

//Check the status of attach
AT+CGATT?

//Activate the PDP context
AT+CGACT=1,1

//Wait
WAIT=3

//Get the assigned IP Address
AT+CGPADDR=1

//Wait
WAIT=3

//Check PDP profile.
AT+CGDCONT?

//Deactivate PDP Context
AT+CGACT=0,1

//Wait
WAIT=3

//Detach from network
AT+CGATT=0
